### ===============================================================
### User API Tests
### ===============================================================

###
# [SUCCESS] Request a single, specific user by their ID.
# Uses the predefined static UUID for the "test" user.
GET http://localhost:9080/historyapi/api/users/fe003ce8-0dae-46cb-8d01-104d1d91d4a0
Accept: application/json

###
# [SUCCESS] Request the list of all users.
GET http://localhost:9080/historyapi/api/users/
Accept: application/json

###
# [FAILURE] Request a user with a non-existent UUID.
# This should return a 404 Not Found error.
GET http://localhost:9080/historyapi/api/users/11111111-1111-1111-1111-111111111111
Accept: application/json


### ===============================================================
### Avatar API Lifecycle Tests
### ===============================================================

###
# 1. [CREATE] Upload an initial avatar for the test user.
# This should return a 201 Created status.
POST http://localhost:9080/historyapi/api/avatars/fe003ce8-0dae-46cb-8d01-104d1d91d4a0
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="avatar"; filename="avatar.jpg"
Content-Type: image/jpeg

< ./src/main/resources/avatars/2.jpg
--boundary--

###
# 2. [VERIFY CREATE] Retrieve the newly uploaded avatar.
# This should return the image with a 200 OK status.
GET http://localhost:9080/historyapi/api/avatars/fe003ce8-0dae-46cb-8d01-104d1d91d4a0

###
# 3. [UPDATE] Upload a new avatar for the same user to test overwriting.
# We'll use a different file to confirm the update works.
# This should also return a 201 Created status.
POST http://localhost:9080/historyapi/api/avatars/fe003ce8-0dae-46cb-8d01-104d1d91d4a0
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="avatar"; filename="new_avatar.png"
Content-Type: image/png

# Make sure you have another image file available for this test
< ./src/main/resources/avatars/1.jpg
--boundary--

###
# 4. [VERIFY UPDATE] Retrieve the avatar again to ensure it has been replaced.
# You should see the new image.
GET http://localhost:9080/historyapi/api/avatars/fe003ce8-0dae-46cb-8d01-104d1d91d4a0

###
# 5. [DELETE] Delete the user's avatar.
# This should return a 200 OK status.
DELETE http://localhost:9080/historyapi/api/avatars/fe003ce8-0dae-46cb-8d01-104d1d91d4a0

###
# 6. [VERIFY DELETE] Attempt to retrieve the deleted avatar.
# This should now fail with a 404 Not Found error.
GET http://localhost:9080/historyapi/api/avatars/fe003ce8-0dae-46cb-8d01-104d1d91d4a0

###
# [FAILURE] Attempt to get an avatar for a user that does not exist.
# This should also fail with a 404 Not Found error.
GET http://localhost:9080/historyapi/api/avatars/11111111-1111-1111-1111-111111111111